@using Pawnshop.Application.ItemCategoriesApplication.Dto
@using Pawnshop.Application.ItemDetailsApplication.Commands.AddItemDetail
@using Pawnshop.Application.ItemDetailsApplication.Commands.UpdateItemDetail
@using Pawnshop.Application.ItemDetailsApplication.Commands.DeleteItemDetail
@using Pawnshop.Application.ItemDetailsApplication.Dto
@using Pawnshop.Application.ItemDetailsApplication.Responses
@using Pawnshop.Domain.Roles
@using Pawnshop.Web.Components.Common
@using Pawnshop.Web.Components.Pages.ItemCategoriesManagmentPage
@using Pawnshop.Web.Exceptions
@using Pawnshop.Web.Services.ApiService

@inject ApiService ApiService;

<DetailModalOverlay>
    <MudCard Class="w-50" Style="max-height: 75vh; overflow: auto;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">User detail</MudText>

                @if (apiExceptions != null)
                {
                    foreach (var error in apiExceptions)
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2">@error</MudAlert>
                    }
                }

            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>

            <MudGrid>
                <MudItem md="6">
                    <MudTextField @bind-Value="@(CurrentItemDetail.Name)"
                                  Label="Name"
                                  Variant="Variant.Outlined"
                                  ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />
                </MudItem>

                <MudItem md="6">
                    <MudTextField @bind-Value="@(CurrentItemDetail.Brand)"
                                  Label="Brand"
                                  Variant="Variant.Outlined"
                                  ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />
                </MudItem>

                <MudItem md="6">
                    <MudTextField @bind-Value="@(CurrentItemDetail.Model)"
                                  Label="Model"
                                  Variant="Variant.Outlined"
                                  ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />
                </MudItem>

                <MudItem md="6">
                    <MudTextField @bind-Value="@(CurrentItemDetail.AddedOn)"
                                  Label="Added On"
                                  Variant="Variant.Outlined"
                                  ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />
                </MudItem>
                <MudItem md="6">
                    <MudTextField @bind-Value="@(CurrentItemDetail.Comments)"
                                  Label="Comments"
                                  Variant="Variant.Outlined"
                                  ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />
                </MudItem>


                <MudItem md="12">
                    <MudCard Class="w-100" Outlined="true">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Item Category Detail</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        
                        <MudCardContent>
                            <MudGrid>
                                <MudItem md="4">
                                    <MudTextField Label="Name"
                                                  @bind-Value="@(CurrentItemDetail.ItemCategory.Name)"
                                                  Variant="Variant.Outlined"
                                                  ReadOnly="true"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@(SelectedAction != UniversalCrudMenu.CrudAction.View && SelectedAction != UniversalCrudMenu.CrudAction.Delete ? Icons.Material.Filled.Search : null)"
                                                  OnAdornmentClick="@(() =>
                                                  {
                                                    if (SelectedAction != UniversalCrudMenu.CrudAction.View && SelectedAction != UniversalCrudMenu.CrudAction.Delete)
                                                        showItemCategoryGrid = true;
                                                  })" />
                                </MudItem>

                                <MudItem md="4">
                                    <MudTextField Label="Item Category"
                                                  @bind-Value="@(CurrentItemDetail.ItemCategory.Description)"
                                                  Variant="Variant.Outlined"
                                                  ReadOnly="true"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@(SelectedAction != UniversalCrudMenu.CrudAction.View && SelectedAction != UniversalCrudMenu.CrudAction.Delete ? Icons.Material.Filled.Search : null)"
                                                  OnAdornmentClick="@(() =>
                                                  {
                                                    if (SelectedAction != UniversalCrudMenu.CrudAction.View && SelectedAction != UniversalCrudMenu.CrudAction.Delete)
                                                        showItemCategoryGrid = true;
                                                  })" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

            @if (showItemCategoryGrid)
            {
                <DetailModalOverlay OnClickOutside="@(()=> showItemCategoryGrid = false)">
                    <ItemCategoriesManagmentGrid OnCategorySelected="HandleItemCategorySelected" />
                </DetailModalOverlay>
            }

        </MudCardContent>

        <MudCardActions Class="gap-2 justify-content-end">
            @if (SelectedAction == UniversalCrudMenu.CrudAction.Add || SelectedAction == UniversalCrudMenu.CrudAction.AddCopy)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudAddHandler">Add</MudButton>
            }
            else if (SelectedAction == UniversalCrudMenu.CrudAction.Update)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudUpdateHandler">Update</MudButton>
            }
            else if (SelectedAction == UniversalCrudMenu.CrudAction.Delete)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudDeleteHandler">Delete</MudButton>
            }

            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleDetailCancel">Cancel</MudButton>
        </MudCardActions>
    </MudCard>
</DetailModalOverlay>

@code {
    [Parameter]
    public EventCallback OnCrudCompleted { get; set; }
    [Parameter]
    public EventCallback OnDetailCancel { get; set; }
    [Parameter]
    public UniversalCrudMenu.CrudAction SelectedAction { get; set; }
    [Parameter]
    public ItemDetailDto CurrentItemDetail { get; set; }

    private bool showItemCategoryGrid = false;
    private List<string> apiExceptions = null;
    protected override void OnParametersSet()
    {
        if (SelectedAction == UniversalCrudMenu.CrudAction.Add)
        {
            CurrentItemDetail = new ItemDetailDto
                {
                    ItemDetailId = Guid.Empty,
                    Name = string.Empty,
                    Model = string.Empty,
                    Brand = string.Empty,
                    SerialNumber = string.Empty,
                    AddedOn = DateTime.Now,
                    ItemCategory = new ItemCategoryDto()
                };
        }

        if (CurrentItemDetail.ItemCategory == null)
        {
            CurrentItemDetail.ItemCategory = new ItemCategoryDto();
        }
    }

    private async Task CrudAddHandler()
    {
        try
        {
            AddItemDetailsCommand newItemDetail = new AddItemDetailsCommand()
                {
                    Name = CurrentItemDetail.Name,
                    Model = CurrentItemDetail.Model,
                    Brand = CurrentItemDetail.Brand,
                    SerialNumber = CurrentItemDetail.SerialNumber,
                    AddedOn = CurrentItemDetail.AddedOn,
                    Comments = CurrentItemDetail.Comments,
                    ItemCategoryId = CurrentItemDetail.ItemCategory.ItemCategoryId
                };

            AddItemDetailsResponse addItemDetailResponse = await ApiService.PostAsync<AddItemDetailsCommand, AddItemDetailsResponse>("/ItemDetails/add", newItemDetail);

            await CrudCompleted();
        }
        catch (ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }

    private async Task CrudUpdateHandler()
    {
        try
        {
            UpdateItemDetailCommand updatedItemDetail = new UpdateItemDetailCommand()
                {
                    UpdateItemId = CurrentItemDetail.ItemDetailId,
                    Name = CurrentItemDetail.Name,
                    Model = CurrentItemDetail.Model,
                    Brand = CurrentItemDetail.Brand,
                    SerialNumber = CurrentItemDetail.SerialNumber,
                    AddedOn = CurrentItemDetail.AddedOn,
                    Comments = CurrentItemDetail.Comments,
                    ItemCategoryId = CurrentItemDetail.ItemCategory.ItemCategoryId
                };

            UpdateItemDetailResponse updatedItemDetailResponse = await ApiService.PutAsync<UpdateItemDetailCommand, UpdateItemDetailResponse>("/ItemDetails/update", updatedItemDetail);

            await CrudCompleted();
        }
        catch (ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }

    private async Task CrudDeleteHandler()
    {
        try
        {
            DeleteItemDetailCommand deleteItemDetail = new DeleteItemDetailCommand()
                {
                    ItemId = CurrentItemDetail.ItemDetailId
                };

            DeleteItemDetailResponse deleteItemDetailResponse = await ApiService.DeleteAsync<DeleteItemDetailCommand, DeleteItemDetailResponse>("/ItemDetails/delete", deleteItemDetail);

            await CrudCompleted();
        }
        catch (ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }
    private void HandleItemCategorySelected(ItemCategoryDto itemCategory)
    {
        CurrentItemDetail.ItemCategory = itemCategory;
        showItemCategoryGrid = false;
    }

    private async Task HandleDetailCancel()
    {
        await OnDetailCancel.InvokeAsync();
    }

    private async Task CrudCompleted()
    {
        await OnCrudCompleted.InvokeAsync();
        await HandleDetailCancel();
    }
}
