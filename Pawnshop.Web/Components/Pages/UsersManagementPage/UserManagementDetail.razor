@using Pawnshop.Application.EmployeesApplication.Dto
@using Pawnshop.Application.UsersApplication.Dto
@using Pawnshop.Domain.Roles
@using Pawnshop.Web.Components.Common
@using Pawnshop.Web.Components.Pages.EmployeeManagementPage

<DetailModalOverlay>
    <MudCard Class="w-50">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">User detail</MudText>

                @if (apiExceptions != null)
                {
                    foreach (var error in apiExceptions)
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2">@error</MudAlert>
                    }
                }

            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>
            <MudTextField @bind-Value="@(CurrentUser.UserName)"
                          Label="Username"
                          Variant="Variant.Outlined"
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudTextField @bind-Value="@(CurrentUser.Email)" 
                          InputType="InputType.Email"
                          Label="Email"
                          Variant="Variant.Outlined"
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudTextField @bind-Value="@(password)"
                          InputType="InputType.Password"
                          Label="Password"
                          Variant="Variant.Outlined"
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudTextField @bind-Value="@(repeatPassword)"
                          InputType="InputType.Password"
                          Label="Repeat password"
                          Variant="Variant.Outlined"
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudSelect T="string" 
                       Label="Roles"
                       Variant="Variant.Outlined"
                       MultiSelection="true"
                       SelectedValues="@CurrentUser.Roles"
                       SelectedValuesChanged="@( (IEnumerable<string> values) => OnRolesSelected(values))"
                       ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)">

                @foreach (var role in availableRoles)
                {
                    <MudSelectItem Value="@role">@role</MudSelectItem>
                }

            </MudSelect>

            <MudTextField Label="Employee ID"
                          @bind-Value="@(CurrentUser.Employee.EmployeeId)"
                          Variant="Variant.Outlined"
                          ReadOnly="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          OnAdornmentClick="@(() => showEmployeeGrid = true)"/>


            @if (showEmployeeGrid)
            {
                <DetailModalOverlay OnClickOutside="@(()=> showEmployeeGrid = false)">
                    <EmployeeManagementGrid OnEmployeeSelected="HandleEmployeeSelected"/>
                </DetailModalOverlay>
            }

        </MudCardContent>

        <MudCardActions Class="gap-2 justify-content-end">
            @if (SelectedAction == UniversalCrudMenu.CrudAction.Add || SelectedAction == UniversalCrudMenu.CrudAction.AddCopy)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudAddHandler">Add</MudButton>
            }
            else if (SelectedAction == UniversalCrudMenu.CrudAction.Update)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudUpdateHandler">Update</MudButton>
            }
            else if (SelectedAction == UniversalCrudMenu.CrudAction.Delete)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudDeleteHandler">Delete</MudButton>
            }

            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleDetailCancel">Cancel</MudButton>
        </MudCardActions>
    </MudCard>
</DetailModalOverlay>

@code {
    [Parameter]
    public UniversalCrudMenu.CrudAction SelectedAction { get; set; }

    [Parameter]
    public GetAllUsersDto CurrentUser { get; set; }

    [Parameter]
    public EventCallback OnDetailCanceled { get; set; }

    [Parameter]
    public EventCallback OnCrudCompleted { get; set; }

    private string password = string.Empty;
    private string repeatPassword = string.Empty;

    private List<string> availableRoles = new();
    private List<string> apiExceptions = null;

    private bool showEmployeeGrid = false;

    protected override void OnInitialized()
    {
        availableRoles = UserRoles.GetRoles().Select(r => r.Name).ToList();
    }

    protected override void OnParametersSet()
    {
        if (SelectedAction == UniversalCrudMenu.CrudAction.Add)
        {
            CurrentUser = new GetAllUsersDto
            {
                UserId = Guid.Empty,
                UserName = string.Empty,
                Email = string.Empty,
                Roles = new List<string>(),
                Employee = new EmployeeDto()
            };
        }

        if (CurrentUser.Employee == null)
        {
            CurrentUser.Employee = new EmployeeDto();
        }
    }

    private void OnRolesSelected(IEnumerable<string> selectedRoles)
    {
        CurrentUser.Roles = selectedRoles.ToList();
        StateHasChanged();
    }

    private void HandleEmployeeSelected(EmployeeDto employee)
    {
        CurrentUser.Employee = employee;
        showEmployeeGrid = false;
    }

    private async Task CrudAddHandler()
    {

    }

    private async Task CrudUpdateHandler()
    {

    }

    private async Task CrudDeleteHandler()
    {

    }

    private async Task HandleDetailCancel()
    {
        await OnDetailCanceled.InvokeAsync();
    }

    private async Task CrudCompleted()
    {
        await OnCrudCompleted.InvokeAsync();
        await HandleDetailCancel();
    }
}

@* {
  "userName": "string",
  "email": "user@example.com",
  "password": "string",
  "repeatedPassword": "string",
  "employeeId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
  "userRoles": [
    "string"
  ]
} *@

@* {
  "name": "string",
  "secondName": "string",
  "surname": "string",
  "birthDate": "2025-04-17T19:19:47.460Z"
} *@