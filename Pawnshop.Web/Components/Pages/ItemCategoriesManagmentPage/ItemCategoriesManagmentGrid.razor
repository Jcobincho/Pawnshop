@using Pawnshop.Application.ItemCategoriesApplication.Dto
@using Pawnshop.Application.ItemCategoriesApplication.Responses
@using Pawnshop.Web.Exceptions
@using Pawnshop.Web.Services.ApiService

@inject ApiService ApiService
<MudDataGrid T="ItemCategoryDto"
             Items = "@(categoriesFromApi?.AllItemCategoriesList?? new List<ItemCategoryDto>())"
             RowClick="OnRowClicked"
             DragDropColumnReordering="true"
             ColumnsPanelReordering="true"
             ColumnResizeMode="ResizeMode.Column"
             RowClassFunc="@((category,index) => category == selectedCategory? "selected-row": string.Empty)"
             Hideable="true"
             Filterable="true"
             Groupable="true"
             FilterMode="DataGridFilterMode.Simple"
             Striped="true"
             ShowMenuIcon="true">
    <Columns>
        <PropertyColumn Property="x=>x.ItemCategoryId" Title="Category id" Hidden="true" DragAndDropEnabled="true" Groupable="true" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x=>x.Description" Title="Description" Hidden="false" Groupable="true" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x=>x.Name" Title="Name" Hidden="false" Groupable="true" Sortable="true" Filterable="true"/>
    </Columns>

</MudDataGrid>

@code {
    [Parameter]
    public EventCallback<ItemCategoryDto> OnCategorySelected { get; set; }
    private ItemCategoryDto selectedCategory;
    public GetAllItemCategoriesResponse categoriesFromApi = null;
    List<string> apiExceptions = null;
    protected override async Task OnInitializedAsync()
    {
        await GetCategoryFromApiAsync();
    }
    public async Task ReloadDataAsync()
    {
        await GetCategoryFromApiAsync();
        await InvokeAsync(StateHasChanged);
    }
    private async Task GetCategoryFromApiAsync()
    {
        try
        {
            categoriesFromApi = await ApiService.GetAsync<GetAllItemCategoriesResponse>("/controller/get");
        }
        catch (ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }
    private async Task OnRowClicked(DataGridRowClickEventArgs<ItemCategoryDto> row)
    {
        selectedCategory = row.Item;
        await OnCategorySelected.InvokeAsync(selectedCategory);
    }
}
