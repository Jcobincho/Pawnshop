@using Pawnshop.Application.EmployeesApplication.Commands.AddEmployee
@using Pawnshop.Application.EmployeesApplication.Commands.DeleteEmployee
@using Pawnshop.Application.EmployeesApplication.Commands.EditEmployee
@using Pawnshop.Application.EmployeesApplication.Dto
@using Pawnshop.Application.EmployeesApplication.Responses
@using Pawnshop.Web.Components.Common
@using Pawnshop.Web.Exceptions
@using Pawnshop.Web.Services.ApiService

@inject ApiService ApiService

<DetailModalOverlay>
    <MudCard Class="w-50">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Employee detail</MudText>

                @if (apiExceptions != null)
                {
                    foreach (var error in apiExceptions)
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2">@error</MudAlert>
                    }
                }

            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="@(CurrentEmployee.Name)" 
                          Label="Name" 
                          Variant="Variant.Outlined" 
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudTextField @bind-Value="CurrentEmployee.SecondName" 
                          Label="Secondname" 
                          Variant="Variant.Outlined" 
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudTextField @bind-Value="CurrentEmployee.Surname" 
                          Label="Surname" 
                          Variant="Variant.Outlined" 
                          ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />

            <MudDatePicker Label="Birth date"
                           Editable="true"
                           Date="@CurrentEmployee.BirthDate"
                           DateChanged="@HandleBirthDateChanged"
                           Mask="@(new DateMask("00.00.0000"))"
                           DateFormat="dd.MM.yyyy"
                           Placeholder="Birth date"
                           Variant="Variant.Outlined" 
                           ReadOnly="@(SelectedAction == UniversalCrudMenu.CrudAction.View || SelectedAction == UniversalCrudMenu.CrudAction.Delete)" />
        </MudCardContent>
        <MudCardActions Class="gap-2 justify-content-end">

            @if (SelectedAction == UniversalCrudMenu.CrudAction.Add || SelectedAction == UniversalCrudMenu.CrudAction.AddCopy)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudAddHandler">Add</MudButton>
            }
            else if (SelectedAction == UniversalCrudMenu.CrudAction.Update)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudUpdateHandler">Update</MudButton>
            }
            else if (SelectedAction == UniversalCrudMenu.CrudAction.Delete)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrudDeleteHandler">Delete</MudButton>
            }

            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="HandleDetailCancel">Cancel</MudButton>

        </MudCardActions>
    </MudCard>
</DetailModalOverlay>



@code {
    [Parameter]
    public EmployeeDto CurrentEmployee { get; set; }

    [Parameter]
    public UniversalCrudMenu.CrudAction SelectedAction { get; set; }

    [Parameter]
    public EventCallback OnCrudCompleted { get; set; }

    [Parameter]
    public EventCallback OnDetailCancel { get; set; }

    private List<string> apiExceptions = null;

    protected override void OnParametersSet()
    {
        if (CurrentEmployee == null || SelectedAction == UniversalCrudMenu.CrudAction.Add)
        {
            CurrentEmployee = new EmployeeDto
            {
                Name = string.Empty,
                SecondName = string.Empty,
                Surname = string.Empty,
                BirthDate = DateTime.Today 
            };
        }
    }

    private void HandleBirthDateChanged(DateTime? date)
    {
        CurrentEmployee.BirthDate = date ?? DateTime.Today;
    }

    private async Task HandleDetailCancel()
    {
        await OnDetailCancel.InvokeAsync();
    }

    private async Task CrudAddHandler()
    {
        try
        {
            AddEmployeeCommand newEmployee = new AddEmployeeCommand();

            newEmployee.Name = CurrentEmployee.Name;
            newEmployee.SecondName = CurrentEmployee.SecondName;
            newEmployee.Surname = CurrentEmployee.Surname;
            newEmployee.BirthDate = CurrentEmployee.BirthDate;

            AddEmployeeResponse addEmployeeResponse = new AddEmployeeResponse();

            addEmployeeResponse = await ApiService.PostAsync<AddEmployeeCommand, AddEmployeeResponse>("/Employees/add", newEmployee);

            await CrudCompleted();
        }
        catch(ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }

    private async Task CrudUpdateHandler()
    {
        try
        {
            UpdateEmployeeCommand updatedEmployee = new UpdateEmployeeCommand();

            updatedEmployee.EmployeeId = CurrentEmployee.EmployeeId;
            updatedEmployee.Name = CurrentEmployee.Name;
            updatedEmployee.SecondName = CurrentEmployee.SecondName;
            updatedEmployee.Surname = CurrentEmployee.Surname;
            updatedEmployee.BirthDate = CurrentEmployee.BirthDate;

            UpdateEmployeeResponse updatedEmployeeResponse = new UpdateEmployeeResponse();

            updatedEmployeeResponse = await ApiService.PutAsync<UpdateEmployeeCommand, UpdateEmployeeResponse>("/Employees/update", updatedEmployee);

            await CrudCompleted();
        }
        catch (ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }

    private async Task CrudDeleteHandler()
    {
        try
        {
            DeleteEmployeeCommand deleteEmployee = new DeleteEmployeeCommand();

            deleteEmployee.EmployeeId = CurrentEmployee.EmployeeId;

            DeleteEmployeeResponse deleteEmployeeResponse = new DeleteEmployeeResponse();

            deleteEmployeeResponse = await ApiService.DeleteAsync<DeleteEmployeeCommand, DeleteEmployeeResponse>("/Employees/delete", deleteEmployee);

            await CrudCompleted();
        }
        catch (ApiException ex)
        {
            apiExceptions = ex.ErrorMessages;
        }
    }

    private async Task CrudCompleted()
    {
        await HandleDetailCancel();
        await OnCrudCompleted.InvokeAsync();
    }
}
